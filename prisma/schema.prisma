generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  agentProfile  Agent?
  payments      Payment[]
  sessions      Session[]
}

model Agent {
  id                 String        @id @default(cuid())
  slug               String        @unique
  userId             String        @unique
  experience         Int?
  bio                String?
  phone              String?
  city               String?
  dateOfBirth        DateTime?
  isSubscribed       Boolean       @default(false)
  subscriptionEndsAt DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  profilePhotoUrl    String?
  area               String?
  heroImage          String?
  heroSubtitle       String?
  heroTitle          String?
  logoUrl            String?
  template           String        @default("fresh-minimal")
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  faqs               FAQ[]
  leads              Lead[]
  pageViews          PageView[]
  payments           Payment[]
  properties         Property[]
  testimonials       Testimonial[]

  @@index([city, area])
}

model Property {
  id              String   @id @default(cuid())
  agentId         String
  title           String
  description     String
  price           Int
  area            Int?     // Make optional as not all property types need this
  bedrooms        Int?     // Make optional as not all property types need this
  bathrooms       Int?     // Make optional as not all property types need this
  location        String
  amenities       String[]
  photos          String[]
  status          String   @default("Available")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  listingType     String
  propertyType    String
  slug            String?  @unique
  brochureUrl     String?
  propertyData    Json?    // Property type specific data (agricultural, plot, etc.)
  agent           Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, slug])
  @@index([agentId, createdAt])
  @@index([agentId, listingType])
  @@index([agentId, status])
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  agentId           String?
  razorpayOrderId   String   @unique
  razorpayPaymentId String   @unique
  amount            Int
  currency          String   @default("INR")
  status            String   @default("completed")
  type              String   @default("subscription")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  agent             Agent?   @relation(fields: [agentId], references: [id])
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([razorpayOrderId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Testimonial {
  id      String  @id @default(cuid())
  agentId String
  text    String
  author  String
  role    String?
  rating  Int?
  agent   Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model FAQ {
  id       String @id @default(cuid())
  agentId  String
  question String
  answer   String
  agent    Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model PageView {
  id         String   @id @default(cuid())
  agentId    String
  timestamp  DateTime @default(now())
  source     String
  device     String
  location   String?
  page       String
  propertyId String?
  ipAddress  String?
  userAgent  String?
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, timestamp])
  @@index([agentId, page])
}

model Lead {
  id         String   @id @default(cuid())
  agentId    String
  timestamp  DateTime @default(now())
  type       String
  source     String?
  propertyId String?
  metadata   String?
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, timestamp])
  @@index([agentId, type])
}
