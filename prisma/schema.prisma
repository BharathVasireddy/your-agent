generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  isActive        Boolean        @default(true)
  suspendedAt     DateTime?
  suspendedBy     String?
  phone           String?    @unique
  phoneVerifiedAt DateTime?
  accounts        Account[]
  agentProfile    Agent?
  leadActivities  LeadActivity[]
  leadNotes       LeadNote[]
  payments        Payment[]
  sessions        Session[]
}

model Agent {
  id                    String              @id @default(cuid())
  slug                  String              @unique
  userId                String              @unique
  experience            Int?
  bio                   String?
  phone                 String?
  city                  String?
  isSubscribed          Boolean             @default(false)
  subscriptionEndsAt    DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  profilePhotoUrl       String?
  area                  String?
  heroImage             String?
  heroSubtitle          String?
  heroTitle             String?
  logoUrl               String?
  template              String              @default("fresh-minimal")
  dateOfBirth           DateTime?
  logoFont              String?
  logoMaxHeight         Int?
  logoMaxWidth          Int?
  heroPrimaryCtaLabel   String?
  heroSecondaryCtaLabel String?
  heroStats             Json?
  templateData          Json?
  subscriptionPlan      String?
  subscriptionInterval  String?
  websiteUrl            String?
  facebookUrl           String?
  instagramUrl          String?
  linkedinUrl           String?
  youtubeUrl            String?
  twitterUrl            String?
  isPublished           Boolean             @default(false)
  officeAddress         String?
  officeMapUrl          String?
  isRemovedByAdmin      Boolean             @default(false)
  removedReason         String?
  cityId                String?
  districtId            String?
  stateId               String?
  cityRelation          City?               @relation(fields: [cityId], references: [id])
  district              District?           @relation(fields: [districtId], references: [id])
  state                 State?              @relation(fields: [stateId], references: [id])
  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  awards                AgentAward[]
  builders              AgentBuilder[]
  galleryImages         AgentGalleryImage[]
  faqs                  FAQ[]
  leads                 Lead[]
  moderationItems       ModerationItem[]
  pageViews             PageView[]
  payments              Payment[]
  properties            Property[]
  testimonials          Testimonial[]

  @@index([city, area])
  @@index([stateId, districtId, cityId])
  @@index([stateId, isSubscribed])
  @@index([districtId, isSubscribed])
}

model Property {
  id               String    @id @default(cuid())
  agentId          String
  title            String
  description      String
  price            Int
  area             Int?
  bedrooms         Int?
  bathrooms        Int?
  location         String
  amenities        String[]
  photos           String[]
  status           String    @default("Available")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  listingType      String
  propertyType     String
  slug             String?   @unique
  brochureUrl      String?
  propertyData     Json?
  adoptedAt        DateTime?
  isHiddenByAgent  Boolean   @default(false)
  sourceDealId     String?
  isRemovedByAdmin Boolean   @default(false)
  removedReason    String?
  agent            Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  sourceDeal       Deal?     @relation(fields: [sourceDealId], references: [id])

  @@index([agentId, slug])
  @@index([agentId, createdAt])
  @@index([agentId, listingType])
  @@index([agentId, status])
}

/// Admin-defined Property Deals that agents can adopt
model Deal {
  id                     String     @id @default(cuid())
  slug                   String     @unique
  title                  String
  description            String
  price                  Int
  agentEarningAmount     Int
  listingType            String
  propertyType           String
  location               String
  amenities              String[]
  photos                 String[]
  brochureUrl            String?
  propertyData           Json?
  status                 String     @default("Active")
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  deletedAt              DateTime?
  minPageViewsLast30d    Int?
  minProfileViewsLast30d Int?
  allowedCities          String[]
  allowedAreas           String[]
  allowedAgentSlugs      String[]
  excludedCities         String[]
  excludedAreas          String[]
  excludedAgentSlugs     String[]
  adoptedProperties      Property[]

  @@index([status])
}

model Payment {
  id                String    @id @default(cuid())
  userId            String
  agentId           String?
  razorpayOrderId   String    @unique
  razorpayPaymentId String    @unique
  amount            Int
  currency          String    @default("INR")
  status            String    @default("completed")
  type              String    @default("subscription")
  plan              String?
  interval          String?
  periodEndsAt      DateTime?
  pricePaidPaise    Int?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  agent             Agent?    @relation(fields: [agentId], references: [id])
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([razorpayOrderId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuthEvent {
  id         String   @id @default(cuid())
  type       String
  userId     String?
  identifier String?
  ipAddress  String?
  userAgent  String?
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())

  @@index([createdAt])
  @@index([identifier])
  @@index([type])
  @@index([userId])
}

model Testimonial {
  id               String  @id @default(cuid())
  agentId          String
  text             String
  author           String
  role             String?
  rating           Int?
  isRemovedByAdmin Boolean @default(false)
  removedReason    String?
  agent            Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model FAQ {
  id               String  @id @default(cuid())
  agentId          String
  question         String
  answer           String
  isRemovedByAdmin Boolean @default(false)
  removedReason    String?
  agent            Agent   @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model PageView {
  id         String   @id @default(cuid())
  agentId    String
  timestamp  DateTime @default(now())
  source     String
  device     String
  location   String?
  page       String
  propertyId String?
  ipAddress  String?
  userAgent  String?
  agent      Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, timestamp])
  @@index([agentId, page])
}

model Lead {
  id         String         @id @default(cuid())
  agentId    String
  timestamp  DateTime       @default(now())
  type       String
  source     String?
  propertyId String?
  metadata   String?
  deletedAt  DateTime?
  slug       String?
  stage      String         @default("new")
  updatedAt  DateTime       @updatedAt
  agent      Agent          @relation(fields: [agentId], references: [id], onDelete: Cascade)
  activities LeadActivity[]
  notes      LeadNote[]

  @@unique([agentId, slug])
  @@index([agentId, timestamp])
  @@index([agentId, type])
}

model LeadNote {
  id        String   @id @default(cuid())
  leadId    String
  userId    String
  text      String
  createdAt DateTime @default(now()) @db.Timestamp(6)
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "LeadNote_lead_fk")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "LeadNote_user_fk")

  @@index([leadId, createdAt], map: "LeadNote_lead_created_idx")
}

/// Append-only activity log per lead
model LeadActivity {
  id        String   @id @default(cuid())
  leadId    String
  userId    String?
  type      String
  data      Json     @default("{}")
  createdAt DateTime @default(now())
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])

  @@index([leadId, createdAt])
}

/// Generic moderation queue for new/updated content
model ModerationItem {
  id        String   @id @default(cuid())
  agentId   String
  type      String
  entityId  String
  action    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  snapshot  Json?
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([status, createdAt])
  @@index([agentId, type, status])
}

/// Awards and recognitions shown on agent profile
model AgentAward {
  id               String   @id @default(cuid())
  agentId          String
  title            String
  issuedBy         String?
  year             Int?
  description      String?
  imageUrl         String?
  isRemovedByAdmin Boolean  @default(false)
  removedReason    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  agent            Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, createdAt])
}

/// Gallery images uploaded by agent
model AgentGalleryImage {
  id               String   @id @default(cuid())
  agentId          String
  imageUrl         String
  caption          String?
  isRemovedByAdmin Boolean  @default(false)
  removedReason    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  agent            Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, createdAt])
}

/// Builders the agent has worked with
model AgentBuilder {
  id               String   @id @default(cuid())
  agentId          String
  name             String
  logoUrl          String
  websiteUrl       String?
  isRemovedByAdmin Boolean  @default(false)
  removedReason    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  agent            Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, createdAt])
}

/// Admin-managed states for service area control
model State {
  id        String     @id @default(cuid())
  name      String     @unique
  code      String     @unique
  country   String     @default("India")
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  agents    Agent[]
  districts District[]

  @@index([isActive])
  @@index([name, isActive])
}

/// Admin-managed districts within states
model District {
  id        String   @id @default(cuid())
  name      String
  stateId   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  agents    Agent[]
  cities    City[]
  state     State    @relation(fields: [stateId], references: [id], onDelete: Cascade)

  @@unique([name, stateId])
  @@index([stateId, isActive])
  @@index([name, isActive])
}

/// Admin-managed cities/areas within districts
model City {
  id         String    @id @default(cuid())
  name       String
  state      String?
  country    String?
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  districtId String?
  pincode    String?
  agents     Agent[]
  district   District? @relation(fields: [districtId], references: [id], onDelete: Cascade)

  @@index([districtId, isActive])
  @@index([name, isActive])
  @@index([state, isActive])
}
