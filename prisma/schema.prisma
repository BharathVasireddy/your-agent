generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  agentProfile  Agent?
  sessions      Session[]
}

model Agent {
  id                 String     @id @default(cuid())
  slug               String     @unique
  userId             String     @unique
  experience         Int?
  bio                String?
  phone              String?
  city               String?
  area               String?
  theme              String     @default("professional-blue")
  isSubscribed       Boolean    @default(false)
  subscriptionEndsAt DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  profilePhotoUrl    String?
  hasSeenTour        Boolean    @default(false)
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties         Property[]

  @@index([city, area])
}

model Property {
  id           String   @id @default(cuid())
  agentId      String
  title        String
  description  String
  price        Int
  area         Int
  bedrooms     Int
  bathrooms    Int
  location     String
  amenities    String[]
  photos       String[]
  status       String   @default("Available")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  listingType  String
  propertyType String
  slug         String?  @unique
  agent        Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, slug])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
