generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  agentProfile  Agent?
  sessions      Session[]
}

model Agent {
  id                 String        @id @default(cuid())
  slug               String        @unique
  userId             String        @unique
  experience         Int?
  bio                String?
  phone              String?
  city               String?
  area               String?
  theme              String        @default("professional-blue")
  isSubscribed       Boolean       @default(false)
  subscriptionEndsAt DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  profilePhotoUrl    String?
  logoUrl            String?
  heroImage          String?
  heroTitle          String?
  heroSubtitle       String?

  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties         Property[]
  testimonials       Testimonial[]
  faqs               FAQ[]
  pageViews          PageView[]
  leads              Lead[]

  @@index([city, area])
}

model Property {
  id           String   @id @default(cuid())
  agentId      String
  title        String
  description  String
  price        Int
  area         Int
  bedrooms     Int
  bathrooms    Int
  location     String
  amenities    String[]
  photos       String[]
  status       String   @default("Available")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  listingType  String
  propertyType String
  slug         String?  @unique
  brochureUrl  String?
  agent        Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@index([agentId, slug])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Testimonial {
  id      String @id @default(cuid())
  agentId String
  agent   Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  text    String @db.Text
  author  String
  role    String? // Role/title of the person giving the testimonial
  rating  Int?   // Optional 1-5 star rating
}

model FAQ {
  id       String @id @default(cuid())
  agentId  String
  agent    Agent  @relation(fields: [agentId], references: [id], onDelete: Cascade)
  question String
  answer   String @db.Text
}

model PageView {
  id        String   @id @default(cuid())
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  source    String   // 'direct', 'social', 'search', 'referral'
  device    String   // 'mobile', 'desktop', 'tablet'
  location  String?  // City or region
  page      String   // 'profile', 'property'
  propertyId String? // If viewing a specific property
  ipAddress String?  // For deduplication
  userAgent String?  // For device detection

  @@index([agentId, timestamp])
  @@index([agentId, page])
}

model Lead {
  id        String   @id @default(cuid())
  agentId   String
  agent     Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  timestamp DateTime @default(now())
  type      String   // 'CALL', 'WHATSAPP', 'FORM', 'EMAIL'
  source    String?  // Where the lead came from
  propertyId String? // If lead was generated from a specific property
  metadata  String?  // Additional JSON data

  @@index([agentId, timestamp])
  @@index([agentId, type])
}
